{"version":3,"file":"cropper-only.js.map","sources":["ng://cropper-only/src/cropper/cropper.component.ts","ng://cropper-only/src/cropper.module.ts"],"sourcesContent":["import {\n    Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, Output,\n    SimpleChanges, ChangeDetectorRef, ChangeDetectionStrategy, NgZone, ViewChild\n} from '@angular/core';\nimport { DomSanitizer, SafeUrl, SafeStyle } from '@angular/platform-browser';\nimport { MoveStart, Dimensions, CropperPosition, CroppedEvent } from '../interfaces';\n\nexport type OutputType = 'base64' | 'file' | 'both';\n\nexport type Rect = { x1: number, y1: number, x2: number, y2: number }\n\n@Component({\n    selector: 'cropper',\n    templateUrl: './cropper.component.html',\n    styleUrls: ['./cropper.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CropperComponent implements OnChanges {\n    private moveStart: MoveStart;\n    private maxSize: Dimensions;\n    private cropperScaledMinWidth = 20;\n    private cropperScaledMinHeight = 20;\n\n    safeImgDataUrl: SafeUrl | string;\n    marginLeft: SafeStyle | string = '0px';\n    imageVisible = false;\n\n    @Input() elementContainer: HTMLVideoElement;\n\n    @Input() maintainAspectRatio = true;\n    @Input() aspectRatio = 1;\n    @Input() resizeToWidth = 0;\n    @Input() cropperMinWidth = 0;\n    @Input() roundCropper = false;\n    @Input() onlyScaleDown = false;\n    @Input() autoCrop = true;\n    @Input() cropper: CropperPosition = {\n        x1: -100,\n        y1: -100,\n        x2: 10000,\n        y2: 10000\n    };\n\n    @Output() imageCropped = new EventEmitter<CroppedEvent>();\n    @Output() cropperReady = new EventEmitter<void>();\n\n    constructor(private sanitizer: DomSanitizer, private cd: ChangeDetectorRef, private zone: NgZone) {\n        this.setCropperInitializationValues();\n    }\n\n    ngOnInit() {\n        this.maxSize = {\n            width: this.elementContainer.offsetWidth,\n            height: this.elementContainer.offsetHeight\n        };\n\n        // this.cropper.x1 = 0;\n        // this.cropper.y1 = 0;\n        // this.cropper.x2 = this.maxSize.width;\n        // this.cropper.y2 = this.maxSize.height;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.cropper) {\n            this.setMaxSize();\n            this.setCropperScaledMinSize();\n            this.checkCropperPosition(false);\n            this.doAutoCrop();\n            this.cd.markForCheck();\n        }\n        if (changes.aspectRatio && this.imageVisible) {\n            this.resetCropperPosition();\n        }\n    }\n\n    @Input() set videoCropperSlice(videoCropper: Rect) {\n        const divideRatio = this.elementContainer.videoWidth / this.elementContainer.offsetWidth;\n        this.cropper.x1 = videoCropper.x1 / divideRatio;\n        this.cropper.y1 = videoCropper.y1 / divideRatio;\n        this.cropper.x2 = videoCropper.x2 / divideRatio;\n        this.cropper.y2 = videoCropper.y2 / divideRatio;\n        console.log('this.cropper', this.cropper);\n    }\n\n    private setCropperInitializationValues() {\n        this.moveStart = {\n            active: false,\n            type: null,\n            position: null,\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            clientX: 0,\n            clientY: 0\n        };\n        this.maxSize = {\n            width: 0,\n            height: 0\n        };\n\n        this.cropper.x1 = -100;\n        this.cropper.y1 = -100;\n        this.cropper.x2 = 10000;\n        this.cropper.y2 = 10000;\n    }\n\n    private checkImageMaxSizeRecursively(): void {\n        if (this.elementContainer && this.elementContainer.offsetWidth > 0) {\n            this.setMaxSize();\n            this.setCropperScaledMinSize();\n            this.resetCropperPosition();\n            this.cropperReady.emit();\n            this.cd.markForCheck();\n        } else {\n            setTimeout(() => {\n                this.checkImageMaxSizeRecursively();\n            }, 50);\n        }\n    }\n\n    @HostListener('window:resize')\n    onResize(): void {\n        this.resizeCropperPosition();\n        this.setMaxSize();\n        this.setCropperScaledMinSize();\n    }\n\n    private resizeCropperPosition(): void {\n        const sourceImageElement = this.elementContainer\n        if (this.maxSize.width !== sourceImageElement.offsetWidth || this.maxSize.height !== sourceImageElement.offsetHeight) {\n            this.cropper.x1 = this.cropper.x1 * sourceImageElement.offsetWidth / this.maxSize.width;\n            this.cropper.x2 = this.cropper.x2 * sourceImageElement.offsetWidth / this.maxSize.width;\n            this.cropper.y1 = this.cropper.y1 * sourceImageElement.offsetHeight / this.maxSize.height;\n            this.cropper.y2 = this.cropper.y2 * sourceImageElement.offsetHeight / this.maxSize.height;\n        }\n    }\n\n    private resetCropperPosition(): void {\n        const sourceImageElement = this.elementContainer\n        if (!this.maintainAspectRatio) {\n            this.cropper.x1 = 0;\n            this.cropper.x2 = sourceImageElement.offsetWidth;\n            this.cropper.y1 = 0;\n            this.cropper.y2 = sourceImageElement.offsetHeight;\n        } else if (sourceImageElement.offsetWidth / this.aspectRatio < sourceImageElement.offsetHeight) {\n            this.cropper.x1 = 0;\n            this.cropper.x2 = sourceImageElement.offsetWidth;\n            const cropperHeight = sourceImageElement.offsetWidth / this.aspectRatio;\n            this.cropper.y1 = (sourceImageElement.offsetHeight - cropperHeight) / 2;\n            this.cropper.y2 = this.cropper.y1 + cropperHeight;\n        } else {\n            this.cropper.y1 = 0;\n            this.cropper.y2 = sourceImageElement.offsetHeight;\n            const cropperWidth = sourceImageElement.offsetHeight * this.aspectRatio;\n            this.cropper.x1 = (sourceImageElement.offsetWidth - cropperWidth) / 2;\n            this.cropper.x2 = this.cropper.x1 + cropperWidth;\n        }\n        this.doAutoCrop();\n        this.imageVisible = true;\n    }\n\n    startMove(event: any, moveType: string, position: string | null = null): void {\n        event.preventDefault();\n        this.moveStart = {\n            active: true,\n            type: moveType,\n            position: position,\n            clientX: this.getClientX(event),\n            clientY: this.getClientY(event),\n            ...this.cropper\n        };\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    @HostListener('document:touchmove', ['$event'])\n    moveImg(event: any): void {\n        if (this.moveStart.active) {\n            event.stopPropagation();\n            event.preventDefault();\n            if (this.moveStart.type === 'move') {\n                this.move(event);\n                this.checkCropperPosition(true);\n            } else if (this.moveStart.type === 'resize') {\n                this.resize(event);\n                this.checkCropperPosition(false);\n            }\n            this.cd.detectChanges();\n        }\n    }\n\n    private setMaxSize(): void {\n        const sourceImageElement = this.elementContainer;\n        this.maxSize.width = sourceImageElement.offsetWidth;\n        this.maxSize.height = sourceImageElement.offsetHeight;\n        this.marginLeft = this.sanitizer.bypassSecurityTrustStyle('calc(50% - ' + this.maxSize.width / 2 + 'px)');\n    }\n\n    private setCropperScaledMinSize(): void {\n        if (this.cropperMinWidth > 0) {\n            this.cropperScaledMinWidth = Math.max(20, this.cropperMinWidth / this.elementContainer.clientWidth * this.maxSize.width);\n            this.cropperScaledMinHeight = this.maintainAspectRatio\n                ? Math.max(20, this.cropperScaledMinWidth / this.aspectRatio)\n                : 20;\n        } else {\n            this.cropperScaledMinWidth = 20;\n            this.cropperScaledMinHeight = 20;\n        }\n    }\n\n    private checkCropperPosition(maintainSize = false): void {\n        if (this.cropper.x1 < 0) {\n            this.cropper.x2 -= maintainSize ? this.cropper.x1 : 0;\n            this.cropper.x1 = 0;\n        }\n        if (this.cropper.y1 < 0) {\n            this.cropper.y2 -= maintainSize ? this.cropper.y1 : 0;\n            this.cropper.y1 = 0;\n        }\n        if (this.cropper.x2 > this.maxSize.width) {\n            this.cropper.x1 -= maintainSize ? (this.cropper.x2 - this.maxSize.width) : 0;\n            this.cropper.x2 = this.maxSize.width;\n        }\n        if (this.cropper.y2 > this.maxSize.height) {\n            this.cropper.y1 -= maintainSize ? (this.cropper.y2 - this.maxSize.height) : 0;\n            this.cropper.y2 = this.maxSize.height;\n        }\n    }\n\n    @HostListener('document:mouseup')\n    @HostListener('document:touchend')\n    moveStop(): void {\n        if (this.moveStart.active) {\n            this.moveStart.active = false;\n            this.doAutoCrop();\n        }\n    }\n\n    private move(event: any) {\n        const diffX = this.getClientX(event) - this.moveStart.clientX;\n        const diffY = this.getClientY(event) - this.moveStart.clientY;\n\n        this.cropper.x1 = this.moveStart.x1 + diffX;\n        this.cropper.y1 = this.moveStart.y1 + diffY;\n        this.cropper.x2 = this.moveStart.x2 + diffX;\n        this.cropper.y2 = this.moveStart.y2 + diffY;\n    }\n\n    private resize(event: any): void {\n        const diffX = this.getClientX(event) - this.moveStart.clientX;\n        const diffY = this.getClientY(event) - this.moveStart.clientY;\n        switch (this.moveStart.position) {\n            case 'left':\n                this.cropper.x1 = Math.min(this.moveStart.x1 + diffX, this.cropper.x2 - this.cropperScaledMinWidth);\n                break;\n            case 'topleft':\n                this.cropper.x1 = Math.min(this.moveStart.x1 + diffX, this.cropper.x2 - this.cropperScaledMinWidth);\n                this.cropper.y1 = Math.min(this.moveStart.y1 + diffY, this.cropper.y2 - this.cropperScaledMinHeight);\n                break;\n            case 'top':\n                this.cropper.y1 = Math.min(this.moveStart.y1 + diffY, this.cropper.y2 - this.cropperScaledMinHeight);\n                break;\n            case 'topright':\n                this.cropper.x2 = Math.max(this.moveStart.x2 + diffX, this.cropper.x1 + this.cropperScaledMinWidth);\n                this.cropper.y1 = Math.min(this.moveStart.y1 + diffY, this.cropper.y2 - this.cropperScaledMinHeight);\n                break;\n            case 'right':\n                this.cropper.x2 = Math.max(this.moveStart.x2 + diffX, this.cropper.x1 + this.cropperScaledMinWidth);\n                break;\n            case 'bottomright':\n                this.cropper.x2 = Math.max(this.moveStart.x2 + diffX, this.cropper.x1 + this.cropperScaledMinWidth);\n                this.cropper.y2 = Math.max(this.moveStart.y2 + diffY, this.cropper.y1 + this.cropperScaledMinHeight);\n                break;\n            case 'bottom':\n                this.cropper.y2 = Math.max(this.moveStart.y2 + diffY, this.cropper.y1 + this.cropperScaledMinHeight);\n                break;\n            case 'bottomleft':\n                this.cropper.x1 = Math.min(this.moveStart.x1 + diffX, this.cropper.x2 - this.cropperScaledMinWidth);\n                this.cropper.y2 = Math.max(this.moveStart.y2 + diffY, this.cropper.y1 + this.cropperScaledMinHeight);\n                break;\n        }\n\n        if (this.maintainAspectRatio) {\n            this.checkAspectRatio();\n        }\n    }\n\n    private checkAspectRatio(): void {\n        let overflowX = 0;\n        let overflowY = 0;\n\n        switch (this.moveStart.position) {\n            case 'top':\n                this.cropper.x2 = this.cropper.x1 + (this.cropper.y2 - this.cropper.y1) * this.aspectRatio;\n                overflowX = Math.max(this.cropper.x2 - this.maxSize.width, 0);\n                overflowY = Math.max(0 - this.cropper.y1, 0);\n                if (overflowX > 0 || overflowY > 0) {\n                    this.cropper.x2 -= (overflowY * this.aspectRatio) > overflowX ? (overflowY * this.aspectRatio) : overflowX;\n                    this.cropper.y1 += (overflowY * this.aspectRatio) > overflowX ? overflowY : overflowX / this.aspectRatio;\n                }\n                break;\n            case 'bottom':\n                this.cropper.x2 = this.cropper.x1 + (this.cropper.y2 - this.cropper.y1) * this.aspectRatio;\n                overflowX = Math.max(this.cropper.x2 - this.maxSize.width, 0);\n                overflowY = Math.max(this.cropper.y2 - this.maxSize.height, 0);\n                if (overflowX > 0 || overflowY > 0) {\n                    this.cropper.x2 -= (overflowY * this.aspectRatio) > overflowX ? (overflowY * this.aspectRatio) : overflowX;\n                    this.cropper.y2 -= (overflowY * this.aspectRatio) > overflowX ? overflowY : (overflowX / this.aspectRatio);\n                }\n                break;\n            case 'topleft':\n                this.cropper.y1 = this.cropper.y2 - (this.cropper.x2 - this.cropper.x1) / this.aspectRatio;\n                overflowX = Math.max(0 - this.cropper.x1, 0);\n                overflowY = Math.max(0 - this.cropper.y1, 0);\n                if (overflowX > 0 || overflowY > 0) {\n                    this.cropper.x1 += (overflowY * this.aspectRatio) > overflowX ? (overflowY * this.aspectRatio) : overflowX;\n                    this.cropper.y1 += (overflowY * this.aspectRatio) > overflowX ? overflowY : overflowX / this.aspectRatio;\n                }\n                break;\n            case 'topright':\n                this.cropper.y1 = this.cropper.y2 - (this.cropper.x2 - this.cropper.x1) / this.aspectRatio;\n                overflowX = Math.max(this.cropper.x2 - this.maxSize.width, 0);\n                overflowY = Math.max(0 - this.cropper.y1, 0);\n                if (overflowX > 0 || overflowY > 0) {\n                    this.cropper.x2 -= (overflowY * this.aspectRatio) > overflowX ? (overflowY * this.aspectRatio) : overflowX;\n                    this.cropper.y1 += (overflowY * this.aspectRatio) > overflowX ? overflowY : overflowX / this.aspectRatio;\n                }\n                break;\n            case 'right':\n            case 'bottomright':\n                this.cropper.y2 = this.cropper.y1 + (this.cropper.x2 - this.cropper.x1) / this.aspectRatio;\n                overflowX = Math.max(this.cropper.x2 - this.maxSize.width, 0);\n                overflowY = Math.max(this.cropper.y2 - this.maxSize.height, 0);\n                if (overflowX > 0 || overflowY > 0) {\n                    this.cropper.x2 -= (overflowY * this.aspectRatio) > overflowX ? (overflowY * this.aspectRatio) : overflowX;\n                    this.cropper.y2 -= (overflowY * this.aspectRatio) > overflowX ? overflowY : overflowX / this.aspectRatio;\n                }\n                break;\n            case 'left':\n            case 'bottomleft':\n                this.cropper.y2 = this.cropper.y1 + (this.cropper.x2 - this.cropper.x1) / this.aspectRatio;\n                overflowX = Math.max(0 - this.cropper.x1, 0);\n                overflowY = Math.max(this.cropper.y2 - this.maxSize.height, 0);\n                if (overflowX > 0 || overflowY > 0) {\n                    this.cropper.x1 += (overflowY * this.aspectRatio) > overflowX ? (overflowY * this.aspectRatio) : overflowX;\n                    this.cropper.y2 -= (overflowY * this.aspectRatio) > overflowX ? overflowY : overflowX / this.aspectRatio;\n                }\n                break;\n        }\n    }\n\n    private doAutoCrop(): void {\n        if (this.autoCrop) {\n            this.crop();\n        }\n    }\n\n    crop(): CroppedEvent | Promise<CroppedEvent> | null {\n        if (this.elementContainer) {\n\n            const imagePosition = this.getImagePosition();\n            const width = imagePosition.x2 - imagePosition.x1;\n            const height = imagePosition.y2 - imagePosition.y1;\n\n            const output = { width, height, imagePosition, cropperPosition: { ...this.cropper } };\n            const resizeRatio = this.getResizeRatio(width);\n            if (resizeRatio !== 1) {\n                output.width = Math.floor(width * resizeRatio);\n                output.height = Math.floor(height * resizeRatio);\n            }\n            this.imageCropped.emit(output);\n        }\n        return null;\n    }\n\n    private getImagePosition(): CropperPosition {\n        const sourceImageElement = this.elementContainer;\n        const ratio = this.elementContainer.videoWidth / sourceImageElement.offsetWidth;\n        return {\n            x1: Math.round(this.cropper.x1 * ratio),\n            y1: Math.round(this.cropper.y1 * ratio),\n            x2: Math.min(Math.round(this.cropper.x2 * ratio), this.elementContainer.videoWidth),\n            y2: Math.min(Math.round(this.cropper.y2 * ratio), this.elementContainer.videoHeight)\n        }\n    }\n\n    private getResizeRatio(width: number): number {\n        return this.resizeToWidth > 0 && (!this.onlyScaleDown || width > this.resizeToWidth)\n            ? this.resizeToWidth / width\n            : 1;\n    }\n\n    private getClientX(event: any): number {\n        return event.clientX || event.touches && event.touches[0] && event.touches[0].clientX;\n    }\n\n    private getClientY(event: any): number {\n        return event.clientY || event.touches && event.touches[0] && event.touches[0].clientY;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CropperComponent } from './cropper/cropper.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        CropperComponent\n    ],\n    exports: [\n        CropperComponent\n    ]\n})\nexport class CropperModule {}"],"names":[],"mappings":"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"}
