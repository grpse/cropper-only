import { EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef, NgZone } from '@angular/core';
import { DomSanitizer, SafeUrl, SafeStyle } from '@angular/platform-browser';
import { CropperPosition, CroppedEvent } from '../interfaces';
export declare type OutputType = 'base64' | 'file' | 'both';
export declare type Rect = {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
};
export declare class CropperComponent implements OnChanges {
    private sanitizer;
    private cd;
    private zone;
    private moveStart;
    private maxSize;
    private cropperScaledMinWidth;
    private cropperScaledMinHeight;
    safeImgDataUrl: SafeUrl | string;
    marginLeft: SafeStyle | string;
    imageVisible: boolean;
    elementContainer: HTMLVideoElement;
    maintainAspectRatio: boolean;
    aspectRatio: number;
    resizeToWidth: number;
    cropperMinWidth: number;
    roundCropper: boolean;
    onlyScaleDown: boolean;
    autoCrop: boolean;
    cropper: CropperPosition;
    imageCropped: EventEmitter<CroppedEvent>;
    cropperReady: EventEmitter<void>;
    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    videoCropperSlice: Rect;
    private setCropperInitializationValues;
    private checkImageMaxSizeRecursively;
    onResize(): void;
    private resizeCropperPosition;
    private resetCropperPosition;
    startMove(event: any, moveType: string, position?: string | null): void;
    moveImg(event: any): void;
    private setMaxSize;
    private setCropperScaledMinSize;
    private checkCropperPosition;
    moveStop(): void;
    private move;
    private resize;
    private checkAspectRatio;
    private doAutoCrop;
    crop(): CroppedEvent | Promise<CroppedEvent> | null;
    private getImagePosition;
    private getResizeRatio;
    private getClientX;
    private getClientY;
}
